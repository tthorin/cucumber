@using _SharedSignalR.Models;
@using static Factories.PokerObjectFactory;
@inject ISignalrContext signalR
@implements IDisposable

<h1>Poker planning</h1>
<h3>Selected style: @selectedStyle</h3>
<!--<fieldset>
	@foreach (var style in styles)
	{
		<div class="leader-poker-radio-wrap">
			<input @onchange="OnSelectionChanged" checked='@(selectedStyle==style?true:false)' type="radio" id="@style" name="answer" value="@style">
			<label for="@style">@style</label>
		</div>
	}
	<div>
	</div>
</fieldset>-->
<div class="style-select-container">
	<button @onclick='()=>HandleClick("T-shirt")' class="style-select-btn">
		<img src="/Images/shirt.svg" class="@(selectedStyle=="T-shirt"?"selected":"")" />
	</button>
	<button @onclick='()=>HandleClick("Delegation Poker")' class="style-select-btn">
		<img src="/Images/truck-fast.svg" class="@(selectedStyle=="Delegation Poker"?"selected":"")" />
	</button>
	<button @onclick='()=>HandleClick("User stories")' class="style-select-btn">
		<img src="/Images/comments.svg" class="@(selectedStyle=="User stories"?"selected":"")" />
	</button>
</div>
		<button @onclick="SendQuestion">Send Question</button>

@code {
	[Parameter]
	public Pages PokerNav { get; set; }
	[Parameter]
	public EventCallback<Pages> PokerNavChanged { get; set; }

	private string selectedStyle = "T-shirt";
	private List<string> styles = new() { "T-shirt", "Delegation Poker", "User stories" };
	private PokerObject question;
	private List<IDisposable> disposables = new();

	protected override void OnInitialized()
	{
		question = GetTshirtStyle(signalR.Settings.Room);
	}
	private void HandleClick(string style)
	{
		selectedStyle = style;
		var room = signalR.Settings.Room;
		question = selectedStyle switch
		{
			"T-shirt" => GetTshirtStyle(room),
			"Delegation Poker" => GetDelegationPokerStyle(room),
			"User stories" => GetUserStoriesStyle(room),
			_ => GetTshirtStyle(room)
		};
	}

	private async void SendQuestion()
	{
		await signalR.SendPokerQuestion(question);
		await PokerNavChanged.InvokeAsync(Pages.LeaderPokerResultAwait);
	}

	private void OnSelectionChanged(ChangeEventArgs e)
	{
		selectedStyle = e.Value.ToString();
		var room = signalR.Settings.Room;
		question = selectedStyle switch
		{
			"T-shirt" => GetTshirtStyle(room),
			"Delegation Poker" => GetDelegationPokerStyle(room),
			"User stories" => GetUserStoriesStyle(room),
			_ => GetTshirtStyle(room)
		};
	}

	public void Dispose()
	{
		foreach (var item in disposables)
		{
			item.Dispose();
		}
	}
}