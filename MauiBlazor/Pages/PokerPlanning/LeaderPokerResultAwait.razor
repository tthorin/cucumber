@using _SharedSignalR.Models;
@inject ISignalrContext signalR;
@implements IDisposable;

@*-----------------------------------------------------------------------------------------*@
<button @onclick="()=>PokerNavChanged.InvokeAsync(Pages.LeaderPokerSelectStyle)">Close Vote</button>
<h3>Room: @signalR.Settings.Room</h3>
<h1>Votes:</h1>
@if (votes.Votes.Count == 0)
{
	<p>Waiting for votes...</p>
}
else
{
	@foreach (var vote in votes.Votes.OrderBy(x => x.Answer))
	{
		<p>@vote.Username voted @vote.Answer</p>
	}
}


@*-----------------------------------------------------------------------------------------*@
@code {
	[Parameter]
	public Pages PokerNav { get; set; }
	[Parameter]
	public EventCallback<Pages> PokerNavChanged { get; set; }

	private PokerVoteResults votes;
	private List<IDisposable> disposables = new();

	protected override void OnInitialized()
	{
		votes = new() {Room=signalR.Settings.Room};
		disposables.AddRange(new[]
		{
			signalR.OnPokerVote(OnPokerVote)
	});
	}

	private async void OnPokerVote(PokerVote vote)
	{
		votes.Votes.Add(vote);
		await signalR.SendPokerVoteResult(votes);
		await InvokeAsync(StateHasChanged);
	}

	public void Dispose()
	{
		foreach (var item in disposables)
		{
			item.Dispose();
		}
	}
}