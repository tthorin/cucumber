@using MauiBlazor.Pages.PokerPlanning
@using MauiBlazor.SignalR;
@using System.Diagnostics;
@using _SharedSignalR.Models;
@inject ISignalrContext signalr;
@implements IDisposable;

<h3>Lobby - waiting</h3>

@if(page == Pages.ClientLobby)
{
    @foreach(var message in messages)
    {
        @message;
    }

    @if(signalr.Connected)
    {
        <p>Connected</p>
    }
    else
    {
        <p>Not connected</p>
    }
}
else if (page == Pages.ClientPokerVoteView)
{
    <CascadingValue Value="this">
        <ClientVoteView Question="@question" />
    </CascadingValue>
}
else if (page == Pages.ClientPokerResultsView)
{
    <ClientResultsView Results="@pokerVoteResults" />
}

@code {
    List<IDisposable> disposables = new();
    Pages page = Pages.ClientLobby;
    List<string> messages = new();
    PokerObject question = new();
    PokerVoteResults pokerVoteResults = new();

    protected override async Task OnInitializedAsync()
    {
        disposables.AddRange(new[] {
            signalr.OnJoin(OnJoin),
            signalr.OnPokerQuestion(OnPokerQuestion),
            signalr.OnPokerResults(OnPokerResults)
    });

        await signalr.Start();

        await signalr.JoinRoom();
    }

    public async void OnJoin(JoinRoomData roomData)
    {
        messages.Add(roomData.User.Username + " has joined. Welcome!");

        await InvokeAsync(StateHasChanged);
    }

    public async void OnPokerQuestion(PokerObject pokerObject)
    {
        page = Pages.ClientPokerVoteView;
        question = pokerObject;

        await InvokeAsync(StateHasChanged);
    }

    public void OnPokerResults(PokerVoteResults results)
    {
        pokerVoteResults = results;
        page = Pages.ClientPokerResultsView;
    }

    public void ChangePage(Pages page)
    {
        this.page = page;
        this.StateHasChanged();
    }

    public void Dispose()
    {
        disposables.ForEach(item => item.Dispose());
    }
}
