@using MauiBlazor.Pages.PokerPlanning
@using MauiBlazor.SignalR;
@using _SharedSignalR.Models;
@using static Factories.PokerObjectFactory;
@inject ISignalrContext signalr;
@implements IDisposable;

<div class="lobby-container">
    @if(page == Pages.ClientLobby)
    {
        <h3>Waiting for leader to do something...</h3>

        <div class="spin" ></div>
        <div>
            @foreach(var message in messages)
            {
                <p>@message</p>
            }

            @if(signalr.Connected)
            {
                <p>Connected</p>
            }
            else
            {
                <p>Not connected</p>
            }
        </div>
    }
    else if (page == Pages.ClientPokerVoteView)
    {
        <CascadingValue Value="this">
            <ClientVoteView Question="@question" />
        </CascadingValue>
    }
    else if (page == Pages.ClientPokerResultsView)
    {
        <ClientResultsView Results="@pokerVoteResults" />
    }
</div>

@code {
    List<IDisposable> disposables = new();
    Pages page = Pages.ClientLobby;
    List<string> messages = new();
    PokerObject question = new();
    PokerVoteResults pokerVoteResults = new();

    protected override async Task OnInitializedAsync()
    {
        disposables.AddRange(new[] {
            signalr.OnJoin(OnJoin),
            signalr.OnPokerQuestion(OnPokerQuestion),
            signalr.OnPokerResults(OnPokerResults)
    });

        await signalr.Start();

        await signalr.JoinRoom();


        //Temp for Css styling
        question = GetUserStoriesStyle("");

        page = Pages.ClientPokerVoteView;
        await InvokeAsync(StateHasChanged);
    }

    public async void OnJoin(JoinRoomData roomData)
    {
        messages.Add(roomData.User.Username + " has joined. Welcome!");

        await InvokeAsync(StateHasChanged);
    }

    public async void OnPokerQuestion(PokerObject pokerObject)
    {
        question = pokerObject;

        await ChangePage(Pages.ClientPokerVoteView);
    }

    public void OnPokerResults(PokerVoteResults results)
    {
        pokerVoteResults = results;
        page = Pages.ClientPokerResultsView;
    }

    public async Task ChangePage(Pages page)
    {
        this.page = page;
        await InvokeAsync(this.StateHasChanged);
    }

    public void Dispose()
    {
        disposables.ForEach(item => item.Dispose());
    }
}
