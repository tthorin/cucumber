@page "/pokerclient"
@using Microsoft.AspNetCore.SignalR.Client;
@using MauiBlazor.Components.Poker.FibonacciStyle;
@using SharedData;
@using _SharedSignalR.PokerData;
@inject NavigationManager NavManager;
@implements IAsyncDisposable;

<h1>Poker client</h1>
@if (!roomJoined)
{
	<EditForm Model="_settings" OnValidSubmit="RoomSubmit">
		<DataAnnotationsValidator/>
		<label class="form-label">
			User Name:
			<input @bind="_settings.UserName" class="form-control" />
		</label>
		<label class="form-label">
		Join room:
		<input @bind="_settings.Room" class="form-control"/>
	</label>
	<button disabled="@string.IsNullOrEmpty(_settings.Room)" class="btn btn-primary">Join Room</button>

	</EditForm>

	@if (_invite is not null)
	{
		<button @onclick="()=>_settings.Room = _invite.Room" class="btn btn-primary">Join @_invite.Room</button>
	}
}
else
{
	<h2>Room: @_room</h2>
	<h1>Select Card</h1>

	<h4>Messages:</h4>
	
	@foreach (var message in messages)
	{
		<p>@message.Question</p>
	}
	

	<FibonacciSelectCard OnSelectedValue="(value) => Send(value)" />
}

@code {
	HubConnection hubConnection;
	List<PokerQuestionData> messages = new();
	string messageInput = "";
	private string _room = "";
	private bool roomJoined;
	private PokerInvite _invite;
	private PokerDTO _settings = new();

	protected override async Task OnInitializedAsync()
	{
		hubConnection = new HubConnectionBuilder()
			.WithUrl(/*NavManager.ToAbsoluteUri("/signalr")*/"https://localhost:7242/signalr")

			.WithAutomaticReconnect()
			.Build();

		hubConnection.On<PokerQuestionData>("Question", (question) =>
		{
			messages.Add(question);
			InvokeAsync(StateHasChanged);
		});

		hubConnection.On<PokerInvite>("RoomInvite", (invite) =>
		{
			_invite = invite;
			InvokeAsync(StateHasChanged);
		});

		await hubConnection.StartAsync();

		await base.OnInitializedAsync();
	}

	private async Task Send(string vote)
	{
		if (hubConnection is not null)
		{
			var voteObj = new PokerVoteData
				{
					Value = vote,
					RoomName = _room
				};
			await hubConnection.SendAsync("Vote", voteObj);
		}
	}

	public async ValueTask DisposeAsync()
	{
		if (hubConnection is not null)
		{
			await hubConnection.DisposeAsync();
		}
	}
	private async Task RoomSubmit()
	{
		_room = _settings.Room;
		roomJoined = true;
		await hubConnection.SendAsync("JoinRoom", _settings);
	}
}