@page "/PokerClient"
@using Microsoft.AspNetCore.SignalR.Client;
@using MauiBlazor.Components.Poker.FibonacciStyle;
@using SharedData;
@inject NavigationManager NavManager;
@implements IAsyncDisposable;

<h1>Poker client</h1>
@if (!roomJoined)
{
    <label>Join room: 
    <input @bind="roomInput"/></label>
    <button @onclick="RoomSubmit">Join Room</button>
}
else
{
    <h2>Room: @_room</h2>
    <h1>Select Card</h1>

    <h4>Messages:</h4>
    @foreach (var message in messages)
    {
        <p>@message.Question</p>
    }

    <FibonacciSelectCard OnSelectedValue="(value) => Send(value)" />
}

@code {
    HubConnection hubConnection;
    List<PokerQuestionData> messages = new();
    string messageInput = "";
    private string roomInput = "";
    private string _room = "";
    private bool roomJoined;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(/*NavManager.ToAbsoluteUri("/signalr")*/"https://localhost:7242/signalr")

            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<PokerQuestionData>("Question", (question) =>
        {
            messages.Add(question);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

        await base.OnInitializedAsync();
    }

    private async Task Send(int vote)
    {
        if (hubConnection is not null)
        {
            var voteObj = new PokerVoteData
            {
                Value = vote,
                RoomName = _room
            };
            await hubConnection.SendAsync("Vote", voteObj);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    private async Task RoomSubmit()
    {
        _room = roomInput;
        roomInput = "";
        roomJoined = true;
        await hubConnection.SendAsync("JoinRoom", _room);
    }
}