@page "/joinroom"
@using MauiBlazor.SignalR;
@using _SharedSignalR.Models;
@implements IDisposable;
@inject NavigationManager NavManager;
@inject ISignalrContext Signalr;


		<div>
			@if(page == PokerClientPages.EnterUsername)
			{
				<EnterUsername OnSubmitted="OnUsernameSubmitted" />
			}	
			else if(page == PokerClientPages.EnterRoomName)
			{
				<EnterRoomName OnSubmitted="OnRoomSubmitted" />
			}
			else if (page == PokerClientPages.Voting)
			{
				<Voting OnValueSelected="(value) => Vote(value)" Feature="@features.LastOrDefault()" />
			}
			else if (page == PokerClientPages.DoneVoting)
			{
				<DoneVoting Vote="vote" />
			}
				
		</div>


@code {
	private List<PokerObject> features = new();
	private List<JoinRoomData> users = new();
	private UserSettings settings = new();
	private PokerClientPages page = PokerClientPages.EnterUsername;
	private string vote = "";
	private List<IDisposable> disposables;

	private void OnUsernameSubmitted(string username)
	{
		settings.Username = username;
		page = PokerClientPages.EnterRoomName;
	}

	private async Task OnRoomSubmitted(string room)
	{
		settings.Room = room;
		page = PokerClientPages.Voting;

		await StartSignalr();
	}

	private async Task StartSignalr()
	{
		Signalr.Settings = settings;

		disposables.AddRange(new []
		{
			Signalr.OnPokerQuestion((feature) => features.Add(feature)),
			Signalr.OnJoin((user) => users.Add(user))
	});

		await Signalr.Start();
	}

	private async Task Vote(string vote)
	{
		await Signalr.SendPokerVote(vote);

		this.vote = vote;
		page++;
	}

	private async Task RoomSubmit()
	{
		await Signalr.Join();
		page++;
	}

	public void Dispose()
	{
		foreach (var dispose in disposables)
			dispose.Dispose();
	}
}